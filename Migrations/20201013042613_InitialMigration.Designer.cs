// <auto-generated />
using System;
using Institute.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Institute.Migrations
{
    [DbContext(typeof(InstituteContext))]
    [Migration("20201013042613_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Institute.Model.Admin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Institute.Model.Answer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("statement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Institute.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MName")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("Institute.Model.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Statement")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("Institute.Model.Chapter", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("IntroVideoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Objectives")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("SN")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IntroVideoId");

                    b.HasIndex("CourseId", "SN")
                        .IsUnique()
                        .HasFilter("[CourseId] IS NOT NULL");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("Institute.Model.ChapterPostAssignment", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignmentDetailId")
                        .HasColumnType("int");

                    b.Property<string>("RefChapterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SN")
                        .HasColumnType("int");

                    b.HasKey("TaskId");

                    b.HasIndex("AssignmentDetailId");

                    b.HasIndex("RefChapterId");

                    b.HasIndex("SN", "RefChapterId")
                        .IsUnique();

                    b.ToTable("ChapterPostAssignments");
                });

            modelBuilder.Entity("Institute.Model.ChapterPostTest", b =>
                {
                    b.Property<string>("TestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefChapterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SN")
                        .HasColumnType("int");

                    b.HasKey("TestId");

                    b.HasIndex("RefChapterId", "SN")
                        .IsUnique();

                    b.ToTable("ChapterPostTests");
                });

            modelBuilder.Entity("Institute.Model.ChapterPreAssignment", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignmentDetailId")
                        .HasColumnType("int");

                    b.Property<string>("RefChapterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SN")
                        .HasColumnType("int");

                    b.HasKey("TaskId");

                    b.HasIndex("AssignmentDetailId");

                    b.HasIndex("RefChapterId", "SN")
                        .IsUnique();

                    b.ToTable("ChapterPreAssignments");
                });

            modelBuilder.Entity("Institute.Model.ChapterPreTest", b =>
                {
                    b.Property<string>("TestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefChapterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SN")
                        .HasColumnType("int");

                    b.HasKey("TestId");

                    b.HasIndex("RefChapterId", "SN")
                        .IsUnique();

                    b.ToTable("ChapterPreTests");
                });

            modelBuilder.Entity("Institute.Model.ConfirmedEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CourseId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId1");

                    b.HasIndex("StudentId1");

                    b.ToTable("ConfirmedEnrollments");
                });

            modelBuilder.Entity("Institute.Model.CorrectAnswer", b =>
                {
                    b.Property<string>("AnswerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefQsnId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AnswerId");

                    b.HasIndex("RefQsnId");

                    b.ToTable("CorrectAnswers");
                });

            modelBuilder.Entity("Institute.Model.Course", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("money");

                    b.Property<string>("Goals")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("IntroVideoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Objectives")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Requriements")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IntroVideoId");

                    b.HasIndex("code")
                        .IsUnique();

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Institute.Model.CourseApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AplicantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CourseId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AplicantId");

                    b.HasIndex("CourseId1");

                    b.ToTable("CourseApplications");
                });

            modelBuilder.Entity("Institute.Model.CoursePostAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("RefCourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SN")
                        .HasColumnType("int");

                    b.HasKey("AssignmentId");

                    b.HasIndex("RefCourseId", "SN")
                        .IsUnique();

                    b.ToTable("CoursePostAssignments");
                });

            modelBuilder.Entity("Institute.Model.CoursePostTest", b =>
                {
                    b.Property<string>("TestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefCourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SN")
                        .HasColumnType("int");

                    b.HasKey("TestId");

                    b.HasIndex("RefCourseId", "SN")
                        .IsUnique();

                    b.ToTable("CoursePostTests");
                });

            modelBuilder.Entity("Institute.Model.CoursePreAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("RefCourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SN")
                        .HasColumnType("int");

                    b.HasKey("AssignmentId");

                    b.HasIndex("RefCourseId", "SN")
                        .IsUnique();

                    b.ToTable("CoursePreAssignments");
                });

            modelBuilder.Entity("Institute.Model.CoursePreTest", b =>
                {
                    b.Property<string>("TestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefCourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SN")
                        .HasColumnType("int");

                    b.HasKey("TestId");

                    b.HasIndex("RefCourseId", "SN")
                        .IsUnique();

                    b.ToTable("CoursePreTests");
                });

            modelBuilder.Entity("Institute.Model.EnrollmentPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("PaymentDetailId");

                    b.ToTable("EnrollmentBills");
                });

            modelBuilder.Entity("Institute.Model.File", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDateTime")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Institute.Model.Image", b =>
                {
                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FileId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Institute.Model.Lesson", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChapterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<int>("SN")
                        .HasColumnType("int");

                    b.Property<string>("TeachingVideoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("TeachingVideoId");

                    b.HasIndex("ChapterId", "SN")
                        .IsUnique()
                        .HasFilter("[ChapterId] IS NOT NULL");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Institute.Model.LessonMaterial", b =>
                {
                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefLessonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SN")
                        .HasColumnType("int");

                    b.HasKey("FileId");

                    b.HasIndex("RefLessonId");

                    b.ToTable("LessonMaterials");
                });

            modelBuilder.Entity("Institute.Model.LessonPostAssignment", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("RefLessonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SN")
                        .HasColumnType("int");

                    b.HasKey("TaskId");

                    b.HasIndex("RefLessonId");

                    b.HasIndex("SN", "RefLessonId")
                        .IsUnique();

                    b.ToTable("LessonPostAssignments");
                });

            modelBuilder.Entity("Institute.Model.LessonPostTest", b =>
                {
                    b.Property<string>("TestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefLessonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SN")
                        .HasColumnType("int");

                    b.HasKey("TestId");

                    b.HasIndex("RefLessonId", "SN")
                        .IsUnique();

                    b.ToTable("LessonPostTests");
                });

            modelBuilder.Entity("Institute.Model.LessonPreAssignment", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("RefLessonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SN")
                        .HasColumnType("int");

                    b.HasKey("TaskId");

                    b.HasIndex("RefLessonId", "SN")
                        .IsUnique();

                    b.ToTable("LessonPreAssignments");
                });

            modelBuilder.Entity("Institute.Model.LessonPreTest", b =>
                {
                    b.Property<string>("TestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefLessonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SN")
                        .HasColumnType("int");

                    b.HasKey("TestId");

                    b.HasIndex("RefLessonId", "SN")
                        .IsUnique();

                    b.ToTable("LessonPreTests");
                });

            modelBuilder.Entity("Institute.Model.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Medium")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaidBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentedDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Institute.Model.PendingEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CourseAccesss")
                        .HasColumnType("bit");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CourseId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId1");

                    b.HasIndex("StudentId1");

                    b.ToTable("PendingEnrollments");
                });

            modelBuilder.Entity("Institute.Model.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Statement")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Institute.Model.RegisteredTutorCourse", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TutorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TutorShare")
                        .HasColumnType("decimal(4,2)");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseId1");

                    b.HasIndex("TutorId");

                    b.ToTable("RegisteredTutorCourses");
                });

            modelBuilder.Entity("Institute.Model.RequestedTutorCourse", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdminComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberofReviews")
                        .HasColumnType("int");

                    b.Property<string>("TutorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TutorShare")
                        .HasColumnType("decimal(4,2)");

                    b.HasKey("CourseId");

                    b.HasIndex("TutorId");

                    b.ToTable("RequestedTutorCourse");
                });

            modelBuilder.Entity("Institute.Model.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Institute.Model.TaskMaterial", b =>
                {
                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("RefTaskId")
                        .HasColumnType("int");

                    b.Property<string>("RefTaskId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SN")
                        .HasColumnType("int");

                    b.HasKey("FileId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("RefTaskId1");

                    b.ToTable("TaskMaterials");
                });

            modelBuilder.Entity("Institute.Model.Test", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Institute.Model.TestQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QuestionId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RefTestId")
                        .HasColumnType("int");

                    b.Property<string>("RefTestId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuestionId1");

                    b.HasIndex("RefTestId1");

                    b.ToTable("TestQuestions");
                });

            modelBuilder.Entity("Institute.Model.TrialEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CourseId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId1");

                    b.HasIndex("StudentId1");

                    b.ToTable("TrialEnrollments");
                });

            modelBuilder.Entity("Institute.Model.Tutor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Tutors");
                });

            modelBuilder.Entity("Institute.Model.UserGivenTest", b =>
                {
                    b.Property<int>("PerformerId")
                        .HasColumnType("int");

                    b.Property<int>("ConductedTestId")
                        .HasColumnType("int");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<string>("ConductedTestId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CorrectlyAnswered")
                        .HasColumnType("int");

                    b.Property<int>("FacedQsns")
                        .HasColumnType("int");

                    b.Property<string>("PerformerId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PerformerId", "ConductedTestId");

                    b.HasIndex("ConductedTestId1");

                    b.HasIndex("PerformerId1");

                    b.ToTable("UserGivenTests");
                });

            modelBuilder.Entity("Institute.Model.UserTask", b =>
                {
                    b.Property<string>("PerformerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GivenTaskId")
                        .HasColumnType("int");

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<string>("CheckerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("Passed")
                        .HasColumnType("bit");

                    b.Property<bool>("Submitted")
                        .HasColumnType("bit");

                    b.HasKey("PerformerId", "GivenTaskId");

                    b.HasIndex("CheckerId");

                    b.HasIndex("GivenTaskId");

                    b.ToTable("UserTasks");
                });

            modelBuilder.Entity("Institute.Model.UserWatchedVideo", b =>
                {
                    b.Property<int>("UserWatchedId")
                        .HasColumnType("int");

                    b.Property<int>("WatchedVideoId")
                        .HasColumnType("int");

                    b.Property<int>("NumofTimeCompletlyWatched")
                        .HasColumnType("int");

                    b.Property<string>("UserWatchedId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("WatchedDuration")
                        .HasColumnType("time");

                    b.Property<string>("WatchedVideoFileId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserWatchedId", "WatchedVideoId");

                    b.HasIndex("UserWatchedId1");

                    b.HasIndex("WatchedVideoFileId");

                    b.ToTable("UserWatchedVideos");
                });

            modelBuilder.Entity("Institute.Model.Video", b =>
                {
                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FileId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("Institute.Model.WrongAnswer", b =>
                {
                    b.Property<string>("AnswerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefQsnId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AnswerId");

                    b.HasIndex("RefQsnId");

                    b.ToTable("WrongAnswers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<string>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Institute.Model.Admin", b =>
                {
                    b.HasOne("Institute.Model.ApplicationUser", "UserDetail")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.Chapter", b =>
                {
                    b.HasOne("Institute.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("Institute.Model.Video", "IntroVideo")
                        .WithMany()
                        .HasForeignKey("IntroVideoId");
                });

            modelBuilder.Entity("Institute.Model.ChapterPostAssignment", b =>
                {
                    b.HasOne("Institute.Model.Assignment", "AssignmentDetail")
                        .WithMany()
                        .HasForeignKey("AssignmentDetailId");

                    b.HasOne("Institute.Model.Chapter", "RefChapter")
                        .WithMany()
                        .HasForeignKey("RefChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.ChapterPostTest", b =>
                {
                    b.HasOne("Institute.Model.Chapter", "RefChapter")
                        .WithMany()
                        .HasForeignKey("RefChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Institute.Model.Test", "TestDetail")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.ChapterPreAssignment", b =>
                {
                    b.HasOne("Institute.Model.Assignment", "AssignmentDetail")
                        .WithMany()
                        .HasForeignKey("AssignmentDetailId");

                    b.HasOne("Institute.Model.Chapter", "RefChapter")
                        .WithMany()
                        .HasForeignKey("RefChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.ChapterPreTest", b =>
                {
                    b.HasOne("Institute.Model.Chapter", "RefChapter")
                        .WithMany()
                        .HasForeignKey("RefChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Institute.Model.Test", "TestDetail")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.ConfirmedEnrollment", b =>
                {
                    b.HasOne("Institute.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId1");

                    b.HasOne("Institute.Model.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId1");
                });

            modelBuilder.Entity("Institute.Model.CorrectAnswer", b =>
                {
                    b.HasOne("Institute.Model.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Institute.Model.Question", "RefQsn")
                        .WithMany("CorrectAnswers")
                        .HasForeignKey("RefQsnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.Course", b =>
                {
                    b.HasOne("Institute.Model.Video", "IntroVideo")
                        .WithMany()
                        .HasForeignKey("IntroVideoId");
                });

            modelBuilder.Entity("Institute.Model.CourseApplication", b =>
                {
                    b.HasOne("Institute.Model.Student", "Aplicant")
                        .WithMany()
                        .HasForeignKey("AplicantId");

                    b.HasOne("Institute.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId1");
                });

            modelBuilder.Entity("Institute.Model.CoursePostAssignment", b =>
                {
                    b.HasOne("Institute.Model.Assignment", "AssignmentDetail")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Institute.Model.Course", "RefCourse")
                        .WithMany()
                        .HasForeignKey("RefCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.CoursePostTest", b =>
                {
                    b.HasOne("Institute.Model.Course", "RefCourse")
                        .WithMany("PostTests")
                        .HasForeignKey("RefCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Institute.Model.Test", "TestDetail")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.CoursePreAssignment", b =>
                {
                    b.HasOne("Institute.Model.Assignment", "AssignmentDetail")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Institute.Model.Course", "RefCourse")
                        .WithMany()
                        .HasForeignKey("RefCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.CoursePreTest", b =>
                {
                    b.HasOne("Institute.Model.Course", "RefCourse")
                        .WithMany("PreTests")
                        .HasForeignKey("RefCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Institute.Model.Test", "TestDetail")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.EnrollmentPayment", b =>
                {
                    b.HasOne("Institute.Model.PendingEnrollment", "Enrollment")
                        .WithMany()
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Institute.Model.Payment", "PaymentDetail")
                        .WithMany()
                        .HasForeignKey("PaymentDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.Image", b =>
                {
                    b.HasOne("Institute.Model.File", "FileDetail")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.Lesson", b =>
                {
                    b.HasOne("Institute.Model.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId");

                    b.HasOne("Institute.Model.Video", "TeachingVideo")
                        .WithMany()
                        .HasForeignKey("TeachingVideoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Institute.Model.LessonMaterial", b =>
                {
                    b.HasOne("Institute.Model.File", "FileDetail")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Institute.Model.Lesson", "RefLesson")
                        .WithMany("LessonMaterials")
                        .HasForeignKey("RefLessonId");
                });

            modelBuilder.Entity("Institute.Model.LessonPostAssignment", b =>
                {
                    b.HasOne("Institute.Model.Lesson", "RefLesson")
                        .WithMany()
                        .HasForeignKey("RefLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Institute.Model.Assignment", "TaskDetail")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.LessonPostTest", b =>
                {
                    b.HasOne("Institute.Model.Lesson", "RefLesson")
                        .WithMany()
                        .HasForeignKey("RefLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Institute.Model.Test", "TestDetail")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.LessonPreAssignment", b =>
                {
                    b.HasOne("Institute.Model.Lesson", "RefLesson")
                        .WithMany()
                        .HasForeignKey("RefLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Institute.Model.Assignment", "TaskDetail")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.LessonPreTest", b =>
                {
                    b.HasOne("Institute.Model.Lesson", "RefLesson")
                        .WithMany()
                        .HasForeignKey("RefLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Institute.Model.Test", "TestDetail")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.PendingEnrollment", b =>
                {
                    b.HasOne("Institute.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId1");

                    b.HasOne("Institute.Model.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId1");
                });

            modelBuilder.Entity("Institute.Model.RegisteredTutorCourse", b =>
                {
                    b.HasOne("Institute.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Institute.Model.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.RequestedTutorCourse", b =>
                {
                    b.HasOne("Institute.Model.Course", "CourseDetail")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Institute.Model.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.Student", b =>
                {
                    b.HasOne("Institute.Model.ApplicationUser", "UserDetail")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.TaskMaterial", b =>
                {
                    b.HasOne("Institute.Model.Assignment", null)
                        .WithMany("Files")
                        .HasForeignKey("AssignmentId");

                    b.HasOne("Institute.Model.File", "FileDetail")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Institute.Model.Lesson", "RefTask")
                        .WithMany()
                        .HasForeignKey("RefTaskId1");
                });

            modelBuilder.Entity("Institute.Model.TestQuestion", b =>
                {
                    b.HasOne("Institute.Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId1");

                    b.HasOne("Institute.Model.Test", "RefTest")
                        .WithMany("TestQAs")
                        .HasForeignKey("RefTestId1");
                });

            modelBuilder.Entity("Institute.Model.TrialEnrollment", b =>
                {
                    b.HasOne("Institute.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId1");

                    b.HasOne("Institute.Model.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId1");
                });

            modelBuilder.Entity("Institute.Model.Tutor", b =>
                {
                    b.HasOne("Institute.Model.ApplicationUser", "UserDetail")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.UserGivenTest", b =>
                {
                    b.HasOne("Institute.Model.Test", "ConductedTest")
                        .WithMany()
                        .HasForeignKey("ConductedTestId1");

                    b.HasOne("Institute.Model.ApplicationUser", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId1");
                });

            modelBuilder.Entity("Institute.Model.UserTask", b =>
                {
                    b.HasOne("Institute.Model.ApplicationUser", "Checker")
                        .WithMany()
                        .HasForeignKey("CheckerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Institute.Model.Assignment", "GivenTask")
                        .WithMany()
                        .HasForeignKey("GivenTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Institute.Model.ApplicationUser", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.UserWatchedVideo", b =>
                {
                    b.HasOne("Institute.Model.ApplicationUser", "UserWatched")
                        .WithMany()
                        .HasForeignKey("UserWatchedId1");

                    b.HasOne("Institute.Model.Video", "WatchedVideo")
                        .WithMany()
                        .HasForeignKey("WatchedVideoFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.Video", b =>
                {
                    b.HasOne("Institute.Model.File", "FileDetail")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Institute.Model.WrongAnswer", b =>
                {
                    b.HasOne("Institute.Model.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Institute.Model.Question", "RefQsn")
                        .WithMany("WrongAnswers")
                        .HasForeignKey("RefQsnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<string>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Institute.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Institute.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<string>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Institute.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Institute.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
